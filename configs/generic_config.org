* Torres emacs configuration

* Call next configuration
     #+BEGIN_SRC emacs-lisp
       (defvar x11-p (eq window-system 'x))
       (defvar win-p (eq window-system 'w32))
     #+END_SRC
* Settings
** Windows configuration
*** set a decent font in windows
   #+BEGIN_SRC emacs-lisp
     ;; this fonts need to be installed, copy them to ~/.local/share/fonts
     (defvar my/variable-width-font "Source Serif Pro"
       "The font to use for variable-pitch (document) text.")
     (defvar my/fixed-width-font "Iosevka Term Slab Md Ex"
       "The font to use for variable-pitch (document) text.")

     (set-face-attribute 'default nil :font my/fixed-width-font :weight 'medium :height 100)
     (set-face-attribute 'fixed-pitch nil :font my/fixed-width-font :weight 'medium :height 100)
     (set-face-attribute 'variable-pitch nil :font my/variable-width-font :weight 'medium :height 1.2)
   #+END_SRC
** general basic emacs configuration
*** Keybindings
**** define shortcuts to change visible buffers
 can be used with windmove-default-keybindings using S-arrows, but I do not like it
     #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-<up>") 'windmove-up)
     (global-set-key (kbd "C-x C-<down>") 'windmove-down)
     (global-set-key (kbd "C-x C-<left>") 'windmove-left)
     (global-set-key (kbd "C-x C-<right>") 'windmove-right)
     #+END_SRC
**** auto-indent
     #+BEGIN_SRC emacs-lisp
     (define-key global-map (kbd "RET") 'newline-and-indent)
     (setq-default tab-always-indent 'complete)
     #+END_SRC
**** kill buffer
     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "C-q") 'kill-this-buffer)
     #+END_SRC
**** move window 2 lines
     #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-<down>") (kbd "C-u 2 C-v"))
     (global-set-key (kbd "M-<up>") (kbd "C-u 2 M-v"))
     #+END_SRC

*** highlight current line
    #+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
    #+END_SRC
*** configure viewing area
    #+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
    #+END_SRC
*** line numbers in programming modes
    #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    #+END_SRC
*** do word wrap in line instead of breaking words
    #+BEGIN_SRC emacs-lisp
    (global-visual-line-mode 1)
    #+END_SRC
*** start from scratch
    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t
	inhibit-startup-echo-area-message t)
    #+END_SRC
*** ido mode, helps with searching
    it is disable currently due to the use of helm
    # #+BEGIN_SRC emacs-lisp
    #   (ido-mode 1)				;
    #   (setq ido-enable-flex-matching t)
    #   (setq ido-everywhere t)
    # #+END_SRC
*** y or n are sufficient
    #+BEGIN_SRC emacs-lisp
      (if (version< emacs-version "28")
	  (fset 'yes-or-no-p 'y-or-n-p)
	(setf use-short-answers t))
    #+END_SRC
*** selection and deletion configuration
    when you mark a region, you can delete it or replace it as in other Windows programs:
    simply hit delete or type whatever you want or yank
    #+BEGIN_SRC emacs-lisp
    (delete-selection-mode)
    #+END_SRC
*** show the matching parentheses immediately
    #+BEGIN_SRC emacs-lisp
    (setq show-paren-delay 0)
    (show-paren-mode 1)
    #+END_SRC
*** define cursor as bar
    #+BEGIN_SRC emacs-lisp
    (setq-default cursor-type 'bar)
    #+END_SRC
*** silence the bell, define error to be visual
    #+BEGIN_SRC emacs-lisp
    (setq visible-bell t)
    #+END_SRC
*** view column number
    #+BEGIN_SRC emacs-lisp
    (setq column-number-mode t)
    #+END_SRC
*** show time
    #+BEGIN_SRC emacs-lisp
    (setf display-time-24hr-format t)
    (display-time-mode 1)
    #+END_SRC
*** set window name as current buffer
    #+BEGIN_SRC emacs-lisp
    (setq-default frame-title-format '("%b [%m]"))
    #+END_SRC
*** hide fringe
 #+begin_src emacs-lisp
 (fringe-mode 0)
 #+end_src

*** winner mode
    this mode allows to navigate in the history of window configuration
    #+BEGIN_SRC emacs-lisp
    (winner-mode t)
    #+END_SRC

*** Delete trailing whitespace on saving
     #+BEGIN_SRC emacs-lisp
       (use-package ws-butler
	 :ensure t
	 :hook (prog-mode-hook 'ws-butler-mode))
     #+END_SRC

*** prettify symbols
     #+BEGIN_SRC emacs-lisp
       (defun my-add-pretty-list ()
	 "make some word or string show as pretty unicode symbols"
	 (mapc (lambda (pair) (push pair prettify-symbols-alist))
	       '(
		 ("lambda" . 955)
		 ("->" . 8594)
		 ("=>" . 8658)
		 ("<=" . 8804)
		 (">=" . 8805)
		 ("sqrt" . 8730)
		 ("alpha" . 945)
		 ("beta" . 946)
		 ("delta" . 916)
		 ("omega" . 937)
		 ("phi" . 969)
		 ("pi" . 960)
		 ("psi" . 936)
		 ("theta" . 952)
		 ("sum" . 8721))))
       (add-hook 'prog-mode-hook 'my-add-pretty-list)
       (add-hook 'org-mode-hook 'my-add-pretty-list)
       (global-prettify-symbols-mode +1)
     #+END_SRC

** Packages
 #   #*** Melpa and use-Package
 #    Use-package is a handful of things: you can make sure a package is downloaded, efficiently configure it (e.g. after load, or as needed), bind keys in a concise way, and more.

 # #+BEGIN_SRC emacs-lisp
 #   (require 'package)
 #   (setq package-archives
 #         '(("gnu" . "https://elpa.gnu.org/packages/")
 #           ("melpa" . "https://melpa.org/packages/")))
 #   (setq load-prefer-newer t)
 #   (unless (package-installed-p 'use-package)
 #     (package-refresh-contents)
 #     (package-install 'use-package))
 #   (require 'use-package)
 # #+END_SRC
*** config session
  #+BEGIN_SRC emacs-lisp
    (defconst +session-dir+ (expand-file-name "~/.emacs.d/session/"))
    (load "~/.emacs.d/config-session.el")
    (require 'config-session) ; session
  #+END_SRC

*** Customize look and feel
**** diminish
package to hide minor modes from modeline
I believe that by using the doom modeline this package becomes not necessary
    #+BEGIN_SRC emacs-lisp
      ;; (use-package diminish
      ;; :ensure t)
      ;; (diminish 'visual-line-mode)
    #+END_SRC
**** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+end_src
**** moe theme
my current theme, it has some minor changes compared to the origial, mainly the background is darker, and that is the reason why it does not have the ensure
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/moe-theme.el/")
     (add-to-list 'load-path "~/.emacs.d/moe-theme.el/")
     (require 'moe-theme)
     (require 'moe-theme-flavours)
     (moe-theme-flavour-darkmate)
     (moe-theme-apply-color 'g/b)
  #+END_SRC
**** helm
  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :ensure t
      :diminish helm-mode
      :config
      (helm-mode 1)
      (helm-autoresize-mode 1)
      (setq helm-autoresize-max-height 40
	    helm-autoresize-min-height 20
	    helm-split-window-in-side-p t
	    helm-mode-fuzzy-match t
	    helm-completion-in-region-fuzzy-match t)
      :bind (("M-x" . 'helm-M-x)
	     ("C-x C-f" . 'helm-find-files)
	     ("C-x C-b" . 'helm-buffers-list)
	     ("C-x b" . helm-mini)
	     ("C-x C-g" . helm-grep-do-git-grep)))

    ;; (require 'helm-icons)
    ;; (customize-set-value 'helm-icons-mode->icon nil)
    ;; ;; (customize-set-value helm-icons-provider 'all-the-icons)
    ;; (helm-icons-enable)
    (use-package helm-slime
      :ensure t
      :init (global-helm-slime-mode))

  #+END_SRC
**** which-key
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
      :ensure t
      :init (which-key-mode)
      ;; :diminish which-key-mode
      :config
      (setq which-key-ide-delay 0.5))
    #+END_SRC
**** All the icons
package to display icons
In a new installation it is needed to install the icons to be displayed: M-x all-the-icons-install-fonts
in windows it is needed to go to the folder where the fonts are downloaded, open and install those fonts
  #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
      :ensure t)
    ;; (use-package all-the-icons-dired
    ;;   :ensure t
    ;;   :init
    ;;   (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
  #+END_SRC
**** persistent scratch
    #+BEGIN_SRC emacs-lisp
      (use-package persistent-scratch
	:ensure t
	:init
	(persistent-scratch-setup-default)
	(persistent-scratch-autosave-mode 1))
    #+END_SRC
**** treemacs
to be installed and configured, the following is the configuration that is advised in treemacs git repository
     #+BEGIN_SRC emacs-lisp
       (use-package treemacs
	 :ensure t
	 :defer t
	 :init
	 (with-eval-after-load 'winum
	   (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
	 :config
	 (progn
	   (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
		 treemacs-deferred-git-apply-delay      0.5
		 treemacs-directory-name-transformer    #'identity
		 treemacs-display-in-side-window        t
		 treemacs-eldoc-display                 t
		 treemacs-file-event-delay              5000
		 treemacs-file-extension-regex          treemacs-last-period-regex-value
		 treemacs-file-follow-delay             0.2
		 treemacs-file-name-transformer         #'identity
		 treemacs-follow-after-init             t
		 treemacs-expand-after-init             t
		 treemacs-git-command-pipe              ""
		 treemacs-goto-tag-strategy             'refetch-index
		 treemacs-indentation                   2
		 treemacs-indentation-string            " "
		 treemacs-is-never-other-window         nil
		 treemacs-max-git-entries               5000
		 treemacs-missing-project-action        'ask
		 treemacs-move-forward-on-expand        nil
		 treemacs-no-png-images                 nil
		 treemacs-no-delete-other-windows       t
		 treemacs-project-follow-cleanup        nil
		 treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
		 treemacs-position                      'left
		 treemacs-read-string-input             'from-child-frame
		 treemacs-recenter-distance             0.1
		 treemacs-recenter-after-file-follow    nil
		 treemacs-recenter-after-tag-follow     nil
		 treemacs-recenter-after-project-jump   'always
		 treemacs-recenter-after-project-expand 'on-distance
		 treemacs-litter-directories            '("/node_modules" "/.venv" "/.cask")
		 treemacs-show-cursor                   nil
		 treemacs-show-hidden-files             t
		 treemacs-silent-filewatch              nil
		 treemacs-silent-refresh                nil
		 treemacs-sorting                       'alphabetic-asc
		 treemacs-space-between-root-nodes      t
		 treemacs-tag-follow-cleanup            t
		 treemacs-tag-follow-delay              1.5
		 treemacs-user-mode-line-format         nil
		 treemacs-user-header-line-format       nil
		 treemacs-width                         35
		 treemacs-workspace-switch-cleanup      nil)

	   ;; The default width and height of the icons is 22 pixels. If you are
	   ;; using a Hi-DPI display, uncomment this to double the icon size.
	   ;;(treemacs-resize-icons 44)

	   (treemacs-follow-mode t)
	   (treemacs-filewatch-mode t)
	   (treemacs-fringe-indicator-mode 'always)
	   (pcase (cons (not (null (executable-find "git")))
			(not (null treemacs-python-executable)))
	     (`(t . t)
	      (treemacs-git-mode 'deferred))
	     (`(t . _)
	      (treemacs-git-mode 'simple))))
	 :bind
	 (:map global-map
	       ("M-0"       . treemacs-select-window)
	       ("C-x t 1"   . treemacs-delete-other-windows)
	       ("C-x t t"   . treemacs)
	       ("C-x t B"   . treemacs-bookmark)
	       ("C-x t C-t" . treemacs-find-file)
	       ("C-x t M-t" . treemacs-find-tag)))
       (require 'treemacs-icons)
       (use-package treemacs-projectile
	 :after (treemacs projectile)
	 :ensure t)

       (use-package treemacs-icons-dired
	 :hook (dired-mode . treemacs-icons-dired-enable-once)
	 :ensure t)

       (use-package treemacs-magit
	 :after (treemacs magit)
	 :ensure t)

       ;; (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
       ;;   :after (treemacs persp-mode) ;;or perspective vs. persp-mode
       ;;   :ensure t
       ;;   :config (treemacs-set-scope-type 'Perspectives))
     #+END_SRC
**** COMMENT helm-icons
     #+begin_src emacs-lisp
       (use-package helm-icons
	 :ensure t
	 :config
	 (setf helm-icons-mode->icon nil)
	 (setf helm-icons-provider 'all-the-icons)
	 (helm-icons-enable))			;
     #+end_src
*** Programming helpers
**** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t)
   #+END_SRC
**** company-mode
 #+begin_src emacs-lisp
     (use-package company
       :after lsp-mode
       :hook (lsp-mode . company-mode)
       :bind (:map lsp-mode-map
	      ("<tab>" . company-indent-or-complete-common))
       :config
   (setq company-show-numbers            t
	 company-minimum-prefix-length   1
	 company-idle-delay              0.5
	 company-backends
	 '((company-files          ; files & directory
	    company-keywords       ; keywords
	    company-capf           ; what is this?
	    company-yasnippet)
	   (company-abbrev company-dabbrev))))

 (use-package company-box
   :ensure t
   :after company
   :hook (company-mode . company-box-mode))
 #+end_src

**** Languages
***** Generic
****** lsp-mode
       #+BEGIN_SRC emacs-lisp
		  (use-package lsp-mode
		    :ensure t
		    :commands (lsp lsp-deferred)
		    :init
		    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
		    :hook ((f90-mode . lsp-mode)
			   (python-mode . lsp-mode)
			   (c-mode . lsp)
			   (c++-mode . lsp)
			   (lsp-mode . lsp-enable-which-key-integration)
			   (lsp-mode . lsp-headerline-breadcrumb-mode)))
		  (use-package helm-lsp
		    :ensure t
		    :config
		    (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
		  (use-package lsp-ui
		    :ensure t
		    :hook (lsp-mode . lsp-ui-mode)
		    :custom
		    (lsp-ui-doc-position 'bottom))
		  (use-package lsp-treemacs
		    ;; project wide overview
		    :ensure t
		    :commands lsp-treemacs-errors-list)
       #+END_SRC
****** dap-mode
#+begin_src emacs-lisp
  (use-package dap-mode
    :ensure t)

  (dap-auto-configure-mode 1)

#+end_src
****** yasnippet
       #+begin_src emacs-lisp
	 (use-package yasnippet
	   :ensure t
	   :init (yas-global-mode 1)
	   ;; :hook (prog-mode-hook . yas-minor-mode)
	   :commands yas-reload-all)
 ;; This illustrates how to redefine yas-expand to S-TAB.
 (define-key yas-minor-mode-map [backtab]     'yas-expand)

 ;; Strangely, just redefining one of the variations below won't work.
 ;; All rebinds seem to be needed.
 (define-key yas-minor-mode-map [(tab)]        nil)
 (define-key yas-minor-mode-map (kbd "TAB")    nil)
 (define-key yas-minor-mode-map (kbd "<tab>")  nil)

       #+end_src
****** flycheck
       #+begin_src emacs-lisp
 ;; flycheck
 (use-package flycheck
   :ensure t
   :init (global-flycheck-mode)
   :config
   (setq flycheck-display-errors-function
	 #'flycheck-display-error-messages-unless-error-list)

   (setq flycheck-indication-mode nil))

 (use-package flycheck-pos-tip
   :ensure t
   :after flycheck
   :config
   (flycheck-pos-tip-mode))
       #+end_src
***** Python
       #+BEGIN_SRC emacs-lisp
	 (use-package lsp-pyright
	   :ensure t
	   :hook (python-mode . (lambda ()
				  (require 'lsp-pyright)
				  (lsp))))  ; or lsp-deferred
       #+END_SRC
***** Fortran
       #+BEGIN_SRC emacs-lisp
	 (add-hook 'f90-mode-hook 'lsp)
       #+END_SRC
***** C
      #+begin_src emacs-lisp
	(use-package ccls
	  :ensure t
	  :hook ((c-mode c++-mode objc-mode cuda-mode) .
		 (lambda () (require 'ccls) (lsp)))
	  :config
	  (setq ccls-executable "/usr/bin/ccls")
	  (setq ccls-initialization-options
		'(:index (:comments 2) :completion (:detailedLabel t))))

  ;; Indentation
	(setq c-default-style "linux"
	      c-basic-offset 4
	      c-label-offset 0
	      tab-width 4
	      indent-tabs-mode nil)

	;; (add-hook 'c-mode-hook 'lsp)
      #+end_src
***** Lisp
****** slime
       # TODO configure slime at work
     #+BEGIN_SRC emacs-lisp
       (defvar *use-slime* t)
	     (load (expand-file-name "~/quicklisp/slime-helper.el"))
	     (setq inferior-lisp-program "sbcl")
	     ;; Replace "sbcl" with the path to your implementation
	     (setq inferior-lisp-program "/usr/bin/sbcl")

	     (eval-and-compile (require 'slime-autoloads))
	     (setq slime-contribs '(slime-fancy slime-banner slime-indentation slime-mdot-fu slime-fuzzy))
 (use-package slime-company
	   :after (slime company)
	   :config (setq slime-company-completion 'fuzzy
			 slime-company-after-completion 'slime-company-just-one-space))
     #+END_SRC

**** Rainbow delimiters
helps identifying matching parentesis easily. In LISP it is really important
  #+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  #+END_SRC
**** electric-pair-mode
does the same as Autopais, but is already included in emacs
  #+BEGIN_SRC emacs-lisp
    (electric-pair-mode t)
  #+END_SRC
**** company-mode
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0
	  company-minimum-prefix-length 2
	  company-selection-wrap-around t)
    :bind (:map company-active-map
	   ("<tab>" . company-complete-selection)))
  (use-package slime-company
  :ensure t
  :config
  (slime-setup '(slime-company)))
#+end_src
**** hl-todo
#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure t
    :init
    (global-hl-todo-mode t))
  (setq hl-todo-keyword-faces
	'(("TODO"   . "#ffa500")
	  ("FIXME"  . "#e20800")
	  ("OPTIMIZE" . "#fce94f")
	  ("DOCME" . "#96ff00")
	  ("NOTE"   . "#fce94f")
	  ("HACK"   . "#e20800")
	  ("TEMP"   . "#e20800")))
#+end_src
**** multiple-cursors
     #+BEGIN_SRC emacs-lisp
       (use-package multiple-cursors
	 :ensure t
	 :bind (("C-S-c C-S-c" . 'mc/edit-lines)
		("C->" . 'mc/mark-next-like-this)
		("C-<" . 'mc/mark-previous-like-this)
		("C-c C-<" . 'mc/mark-all-like-this)))
     #+END_SRC
**** projectile
#+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config (projectile-mode)
      :custom ((projectile-completion-system 'helm))
      :bind-keymap
      ("C-c p" . projectile-command-map)
      :init
      ;; NOTE: Set this to the folder where you keep your Git repos!x
      (setq projectile-switch-project-action #'projectile-find-dir)
      (setq projectile-project-search-path '("~/projects")))
       #+END_SRC
**** gendoxy
#+begin_src emacs-lisp
  (load (expand-file-name "~/.emacs.d/gendoxy.el"))
#+end_src
*** org mode configuration
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :init
       (setq org-startup-folded 'content
	     org-log-done t)
       :bind (("\C-cl" . 'org-store-link)
	      ("\C-ca" . 'org-agenda))
       :config (setq org-support-shift-select t))
     (setq org-directory "~/Dropbox/orgfiles")
     (setf org-agenda-tags-column -100)
     (setq org-todo-keywords
	'((sequence "TODO(t)"
		    "MAYBE"
		    "NEXT"
		    "STARTED"
		    "WAITING"
		    "DELEGATED"
		    "|"
		    "DONE(d)"
		    "CANCELLED(c)")
	  (sequence 
	       "MEETING(m)"
	       "|"
	       "DONE(d)"
	       "CANCELLED(c)")))
     (setf org-group-tags nil)
     (setf org-tag-persistent-alist '(("personal" . ?p)
				      ("houses" . ?h)
				      ("vacations" . ?v)
				      ("management" . ?m)
				      ("csw" . ?w)
				      ("coding" . ?c)))
     (setq org-babel-python-command "/usr/bin/python3")
     (use-package helm-org
       :ensure t)
     (add-to-list 'helm-completing-read-handlers-alist '(org-capture . helm-org-completing-read-tags))
     (add-to-list 'helm-completing-read-handlers-alist '(org-set-tags-command . helm-org-completing-read-tags))

     ;; Resize Org headings
(dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 0.98)
                (org-level-6 . 0.96)
                (org-level-7 . 0.94)
                (org-level-8 . 0.92)))
  (set-face-attribute (car face) nil :font my/variable-width-font :weight 'medium :height (cdr face)))

(set-face-attribute 'org-document-title nil :font my/variable-width-font :weight 'bold :height 1.3)

(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
   #+END_SRC
**** org-present
This configuration is based in a presentation by Daviwil in this [[https://www.youtube.com/watch?v=SCPoF1PTZpI][video]]
#+begin_src emacs-lisp
  (use-package org-present
    :ensure t)

  (defun my/org-present-prepare-slide (buffer-name heading)
    ;; Show only top-level headlines
    (org-overview)

    ;; Unfold the current entry
    (org-show-entry)

    ;; Show only direct subheadings of the slide but don't expand them
    (org-show-children))

  (defun my/org-present-start ()
    ;; Tweak font sizes
    (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
				       (header-line (:height 4.0) variable-pitch)
				       (org-document-title (:height 1.75) org-document-title)
				       (org-code (:height 1.55) org-code)
				       (org-verbatim (:height 1.55) org-verbatim)
				       (org-block (:height 1.25) org-block)
				       (org-block-begin-line (:height 0.7) org-block)))

    ;; Set a blank header line string to create blank space at the top
    (setq header-line-format " ")

    ;; Display inline images automatically
    (org-display-inline-images)

    ;; Center the presentation and wrap lines
    (visual-fill-column-mode 1)
    (visual-line-mode 1))

  (defun my/org-present-end ()
    ;; Reset font customizations
    (setq-local face-remapping-alist '((default fixed-pitch default)))

    ;; Clear the header line string so that it isn't displayed
    (setq header-line-format nil)

    ;; Stop displaying inline images
    (org-remove-inline-images)

    ;; Stop centering the document
    (visual-fill-column-mode 0)
    (visual-line-mode 0))

  ;; Turn on variable pitch fonts in Org Mode buffers
  (add-hook 'org-mode-hook 'variable-pitch-mode)

  ;; Register hooks with org-present
  (add-hook 'org-present-mode-hook 'my/org-present-start)
  (add-hook 'org-present-mode-quit-hook 'my/org-present-end)
  (add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide)
#+end_src
**** denote
#+begin_src emacs-lisp
  (use-package denote
    :ensure t)
  (setq denote-directory (expand-file-name "~/Dropbox/orgfiles/denotes/"))
  (setq denote-known-keywords '("emacs" "programming" "journal"))
  (setq denote-date-prompt-use-org-read-date t)
#+end_src
**** org babel
   #+BEGIN_SRC emacs-lisp
          (org-babel-do-load-languages
                'org-babel-load-languages '((python . t)
                                            (fortran . t)
                                            (C . t)
                                            (lisp . t)
                                            (shell . t)))
   #+END_SRC

**** org-superstar
mainly eye candy but at least I don't need to see so many * and so org mode is more condensed
   #+BEGIN_SRC emacs-lisp
   (use-package org-superstar
      :ensure t
      :hook (org-mode . (lambda () (org-superstar-mode 1))))
   #+END_SRC

**** calendar
#+begin_src emacs-lisp
  (setq holiday-general-holidays nil
	holiday-christian-holidays nil
	holiday-hebrew-holidays nil
	holiday-islamic-holidays nil
	holiday-bahai-holidays nil
	holiday-oriental-holidays nil
	holiday-solar-holidays nil)

  (setq holiday-local-holidays '((holiday-fixed 1 1 "Dia ano novo")
				 (holiday-fixed 2 14 "Valentine's Day")
				 (holiday-easter-etc -47 "Carnaval")
				 (holiday-easter-etc -2 "Sexta-feira santa")
				 (holiday-easter-etc 0 "Páscoa")
				 (holiday-easter-etc 60 "Corpo de Cristo")
				 (holiday-fixed 3 19 "Dia do Pai")
				 (holiday-fixed 4 25 "25 Abril")
				 (holiday-fixed 5 1 "Dia trabalhador")
				 (holiday-float 5 0 1 "Dia da Mãe")
				 (holiday-fixed 6 1 "Dia da criança")
				 (holiday-fixed 6 10 "Dia Portugal")
				 (holiday-fixed 6 13 "Dia S António (Lisboa)")
				 (holiday-fixed 8 15 "Dia S Assunção")
				 (holiday-fixed 10 5 "Implantação da républica")
				 (holiday-fixed 11 1 "Todos os santos")
				 (holiday-fixed 12 1 "Restauração da Independência")
				 (holiday-fixed 12 8 "Dia Imaculada conceição")
				 (holiday-fixed 12 25 "Christmas")))
#+end_src
*** random packages
**** add search engines to search
search several places from emacs
   #+BEGIN_SRC emacs-lisp
   (use-package engine-mode
      :ensure t
      :config
      (engine-mode t))
    ;; to change the default browser from firefox to eww uncomment the following line
    ;;(setq engine/browser-function 'eww-browse-url)
    ;; the search engines are defined in file:
    (load (expand-file-name "~/.emacs.d/search_engines.el"))
   #+END_SRC
**** writeroom mode
a mode to hide all distraction from emacs and keep focused in the current document and work
   #+BEGIN_SRC emacs-lisp
     (use-package writeroom-mode
       :ensure t
       :bind(([f5] . 'writeroom-mode)))
   #+END_SRC
**** command log
Package useful for making emacs demonstrations
     #+BEGIN_SRC emacs-lisp
       (use-package command-log-mode
	 :ensure t)
     #+END_SRC

**** terminal emulator (vterm)
     #+begin_src emacs-lisp
       (use-package vterm
           :ensure t)
     #+end_src
**** reddigg (reddit reader)
     #+begin_src emacs-lisp
       (use-package reddigg
	 :ensure t
	 :config
	 (setq org-confirm-elisp-link-function nil
	       reddigg-subs '(emacs portugal Common_Lisp Algarve Faro EDH Fantasy lisp mtg magicTCG odivelas sbcl DevinTownsend devpt)))
     #+end_src
**** pdf-tools
     #+begin_src emacs-lisp
       (use-package pdf-tools
	 :ensure t
	 :config (pdf-loader-install)
	 :hook (pdf-view-mode . (lambda ()
				  (pdf-tools-enable-minor-modes))))

     #+end_src
**** rainbow-mode
this is a mode to show colors in hex codes
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+end_src
** Functions
*** mygrep
    #+BEGIN_SRC emacs-lisp
    (defun mygrep-lisp ()
      "Recursively grep from current file directory, ignoring comments."
      (interactive)
      (let* ((search-term (read-string "search term: "))
             (search-path
	       (directory-file-name (expand-file-name (read-directory-name "directory: "))))
             (default-directory (file-name-as-directory search-path))
             (grep-command
	       (concat
	         grep-program
	         " -inIr '--include=*.'{lisp,cl,bil,el,asd,dic} -e \"^[^;]*"
	         search-term
		 "\" "
		 search-path)))
            (compilation-start grep-command 'grep-mode (lambda (mode) "grep") nil)))
   #+END_SRC

*** wheather
    #+begin_src emacs-lisp
      (defun weather ()
	(interactive)
	(let* ((wdiff (- 127 (window-total-width)))
	       (site "wttr.in/")
	       (location (read-string "where: " "" "" "lisboa")))
	  (eww (concat site location))
	  (when (> wdiff 0)
	    (enlarge-window-horizontally wdiff))))
    #+end_src

*** denote
#+begin_src emacs-lisp
  (require 'cl)

  (defun journals_to_org_agenda ()
    "get journals since last month"
    (let* ((min_date (format-time-string "%Y%m%d"
					 (encode-time
					  (decoded-time-add (parse-time-string
							     (calendar-date-string
							      (calendar-current-date)))
							    (make-decoded-time :month (- 1))))))
	   (all_journals (sort
			  (directory-files (denote-directory) nil "^[0-9].*_journal.*org$")
			  #'string>))
	   (out_list nil))
      (dolist (journal all_journals out_list)
	(when (string> (substring journal 0 8) min_date)
	  (push (concat (denote-directory) journal) out_list)))))

  (setq org-agenda-files (append '("~/Dropbox/orgfiles/todo.org")
				 (journals_to_org_agenda)))

  (defun journal-day-exists-p ( target )
    "check if journal for a day already exists"
    (file-expand-wildcards (concat (denote-directory) target "*_journal*.org")))

  (defun find-previous-journal ()
    "Find most recent journal"
    (let* ((today (format-time-string "%Y%m%d"))
	   (all_journals (sort (directory-files "~/Dropbox/orgfiles/denotes" nil "^[0-9].*_journal.*org$") #'string>)))
      (dolist (journal all_journals)
	(when (string< (substring journal 0 8) today)
	  (return journal)))))

  (defun my-refile-tasks (file)
    (interactive)
    (let* ((org-archive-location (concat file "::* TASKS"))
	   (org-archive-save-context-info nil))

      (goto-char (point-min))
      (unless (re-search-forward "^\\* TASKS" nil t)
	(goto-char (point-max))
	(insert "* TASKS\n\n"))
      (goto-char (point-max))
      (while
	  (re-search-backward
	   "^\\*\\* \\(TODO\\|MAYBE\\|NEXT\\|STARTED\\|WAITING\\|DELEGATED\\|MEETING\\|SCHEDULED\\|DEADLINE\\)" nil t)
	(org-archive-subtree))))

  (defun move-todos()
    (let ((filename (concat (denote-directory)
			    (find-previous-journal))))
      (find-file filename)
      (my-refile-tasks (car
			(journal-day-exists-p
			 (format-time-string "%Y%m%d"))))
      (save-buffer)
      (kill-buffer (buffer-name))))

  (defun my-denote-journal-today ()
    "Create an entry tagged 'journal' with the date as its title."
    (interactive)
    (let* ((today (format-time-string "%Y%m%d"))
	   (filename (car (journal-day-exists-p today)))
	   (prev (find-previous-journal)))
      (if filename
	  (find-file filename)
	(progn
	  (denote
	   (format-time-string "%Yw%W-%a %e %b")   ; format like 2022w48-Tue 29 Nov
	   '("journal")
	   nil
	   "~/Denotes")
	  (insert "* THOUGHTS\n\n* IDEAS\n\n* CODE\n\n* TASKS\n\n")
	  (save-buffer)
	  (move-todos)
	  (setq org-agenda-files (append '("~/Dropbox/orgfiles/todo.org")
					 (journals_to_org_agenda)))))))

  (defun my-denote-journal-date()
  (declare (interactive-only t))
  (interactive)
  (let* ((date (org-read-date nil t))
	 (filename (car (journal-day-exists-p (format-time-string "%Y%m%d" date)))))
    (if filename
	(find-file filename)
      (progn
	(denote
	 (format-time-string "%Yw%W-%a %e %b" date)   ; format like Tuesday 14 June 2022
	 '("journal")
	 nil
	 "~/Denotes")
	(insert "* THOUGHTS\n\n* IDEAS\n\n* CODE\n\n* TASKS\n - Remember to call:\n\n (move-todos)")))))
#+end_src

* COMMENT Unused Configurations
Some packages I have used in the past, but for some reason I stoped using them, but the configuration might still be useful for someone, so I keep it here until I feel like cleaning this part.
** powerline
 #+BEGIN_SRC emacs-lisp
   ;; (use-package powerline
   ;; :ensure t
   ;; :init
   ;; (powerline-default-theme))
 #+END_SRC
** Auto-complete
automatically completes words in programming modes
   #+BEGIN_SRC emacs-lisp
     ;; (use-package auto-complete
     ;; :ensure t
     ;; :config
     ;; (global-auto-complete-mode t)
     ;; :hook (prog-mode #'auto-complete-mode))
  #+END_SRC

** centaur tabs
 #+BEGIN_SRC emacs-lisp
   ;; (use-package centaur-tabs
   ;; :ensure t
   ;; :bind (("C-<prior>" . 'centaur-tabs-backward)
   ;; ("C-<next>"  . 'centaur-tabs-forward)))
   ;; (centaur-tabs-mode t)
   ;; (centaur-tabs-headline-match)
   ;; (setq centaur-tabs-style "slant")
   ;; (setq centaur-tabs-set-icons t)
   ;; (setq centaur-tabs-cycle-scope 'tabs)
   ;; (setq centaur-tabs-set-modified-marker t)
   ;; (setq centaur-tabs-modified-marker "*")

 #+END_SRC





