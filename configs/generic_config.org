* Torres emacs configuration

* Call next configuration
     #+BEGIN_SRC emacs-lisp
       (defvar x11-p (eq window-system 'x))
       (defvar siscog-p (string-match "rtorres" (user-login-name)))
       (defvar win-p (eq window-system 'w32))
       (if siscog-p
	   (org-babel-load-file "./work_config.org")
	 (org-babel-load-file "./home_config.org"))
     #+END_SRC
* Settings
** Windows configuration
*** set a decent font in windows
   #+BEGIN_SRC emacs-lisp
     (when win-p
       (set-face-attribute 'default nil :family "Consolas" :height 110))
   #+END_SRC
** general basic emacs configuration
*** Keybindings
**** define shortcuts to change visible buffers
 can be used with windmove-default-keybindings using S-arrows, but I do not like it
     #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-<up>") 'windmove-up)
     (global-set-key (kbd "C-x C-<down>") 'windmove-down)
     (global-set-key (kbd "C-x C-<left>") 'windmove-left)
     (global-set-key (kbd "C-x C-<right>") 'windmove-right)
     #+END_SRC
**** auto-indent
     #+BEGIN_SRC emacs-lisp
     (define-key global-map (kbd "RET") 'newline-and-indent)
     (setq-default tab-always-indent 'complete)
     #+END_SRC
**** kill buffer
     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "C-q") 'kill-this-buffer)
     #+END_SRC
**** move window 2 lines
     #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-<down>") (kbd "C-u 2 C-v"))
     (global-set-key (kbd "M-<up>") (kbd "C-u 2 M-v"))
     #+END_SRC

*** highlight current line
    #+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
    #+END_SRC
*** configure viewing area
    #+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
    #+END_SRC
*** line numbers in programming modes
    #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    #+END_SRC
*** do word wrap in line instead of breaking words
    #+BEGIN_SRC emacs-lisp
    (global-visual-line-mode 1)
    #+END_SRC
*** start from scratch
    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t
	inhibit-startup-echo-area-message t)
    #+END_SRC
*** ido mode, helps with searching
    it is disable currently due to the use of helm
    # #+BEGIN_SRC emacs-lisp
    #   (ido-mode 1)				;
    #   (setq ido-enable-flex-matching t)
    #   (setq ido-everywhere t)
    # #+END_SRC
*** y or n are sufficient
    #+BEGIN_SRC emacs-lisp
      (if (version< emacs-version "28")
	  (fset 'yes-or-no-p 'y-or-n-p)
	(setf use-short-answers t))
    #+END_SRC
*** selection and deletion configuration
    when you mark a region, you can delete it or replace it as in other Windows programs:
    simply hit delete or type whatever you want or yank
    #+BEGIN_SRC emacs-lisp
    (delete-selection-mode)
    #+END_SRC
*** show the matching parentheses immediately
    #+BEGIN_SRC emacs-lisp
    (setq show-paren-delay 0)
    (show-paren-mode 1)
    #+END_SRC
*** define cursor as bar
    #+BEGIN_SRC emacs-lisp
    (setq-default cursor-type 'bar)
    #+END_SRC
*** silence the bell, define error to be visual
    #+BEGIN_SRC emacs-lisp
    (setq visible-bell t)
    #+END_SRC
*** view column number
    #+BEGIN_SRC emacs-lisp
    (setq column-number-mode t)
    #+END_SRC
*** show time
    #+BEGIN_SRC emacs-lisp
    (setf display-time-24hr-format t)
    (display-time-mode 1)
    #+END_SRC
*** set window name as current buffer
    #+BEGIN_SRC emacs-lisp
    (setq-default frame-title-format '("%b [%m]"))
    #+END_SRC
*** hide fringe
 #+begin_src emacs-lisp
 (fringe-mode 0)
 #+end_src

*** winner mode
    this mode allows to navigate in the history of window configuration
    #+BEGIN_SRC emacs-lisp
    (winner-mode t)
    #+END_SRC

*** Delete trailing whitespace on saving
     #+BEGIN_SRC emacs-lisp
       (add-hook 'before-save-hook 'delete-trailing-whitespace)
     #+END_SRC

*** prettify symbols
     #+BEGIN_SRC emacs-lisp
       (defun my-add-pretty-list ()
	 "make some word or string show as pretty unicode symbols"
	 (mapc (lambda (pair) (push pair prettify-symbols-alist))
	       '(
		 ("lambda" . 955)
		 ("->" . 8594)
		 ("=>" . 8658)
		 ("<=" . 8804)
		 (">=" . 8805)
		 ("sqrt" . 8730)
		 ("alpha" . 945)
		 ("beta" . 946)
		 ("delta" . 916)
		 ("omega" . 937)
		 ("phi" . 969)
		 ("pi" . 960)
		 ("psi" . 936)
		 ("theta" . 952)
		 ("sum" . 8721))))
       (add-hook 'prog-mode-hook 'my-add-pretty-list)
       (add-hook 'org-mode-hook 'my-add-pretty-list)
       (global-prettify-symbols-mode +1)
     #+END_SRC

** Packages
 #   #*** Melpa and use-Package
 #    Use-package is a handful of things: you can make sure a package is downloaded, efficiently configure it (e.g. after load, or as needed), bind keys in a concise way, and more.

 # #+BEGIN_SRC emacs-lisp
 #   (require 'package)
 #   (setq package-archives
 #         '(("gnu" . "https://elpa.gnu.org/packages/")
 #           ("melpa" . "https://melpa.org/packages/")))
 #   (setq load-prefer-newer t)
 #   (unless (package-installed-p 'use-package)
 #     (package-refresh-contents)
 #     (package-install 'use-package))
 #   (require 'use-package)
 # #+END_SRC
*** config session
  #+BEGIN_SRC emacs-lisp
    (defconst +session-dir+ (expand-file-name "~/.emacs.d/session/"))
    (load "~/.emacs.d/config-session.el")
    (require 'config-session) ; session
  #+END_SRC

*** Customize look and feel
**** diminish
package to hide minor modes from modeline
I believe that by using the doom modeline this package becomes not necessary
    #+BEGIN_SRC emacs-lisp
      ;; (use-package diminish
      ;; :ensure t)
      ;; (diminish 'visual-line-mode)
    #+END_SRC
**** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+end_src
**** moe theme
my current theme, it has some minor changes compared to the origial, mainly the background is darker, and that is the reason why it does not have the ensure
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/moe-theme.el/")
     (add-to-list 'load-path "~/.emacs.d/moe-theme.el/")
     (require 'moe-theme)
     (require 'moe-theme-flavours)
     (moe-theme-flavour-darkmate)
     (moe-theme-apply-color 'g/b)
  #+END_SRC
**** helm
  #+BEGIN_SRC emacs-lisp
    (use-package helm
	:ensure t
	;; :diminish helm-mode
	:config
	(helm-mode 1)
	:bind (("M-x" . 'helm-M-x)
	       ("C-x C-f" . 'helm-find-files)
	       ("C-x C-b" . 'helm-buffers-list)
	       ("C-x b" . 'helm-mini)))
  #+END_SRC
**** which-key
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
      :ensure t
      :init (which-key-mode)
      ;; :diminish which-key-mode
      :config
      (setq which-key-ide-delay 0.5))
    #+END_SRC
**** All the icons
package to display icons
  #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
      :ensure t)
    (use-package all-the-icons-dired
      :ensure t
      :init
      (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
  #+END_SRC
**** persistent scratch
    #+BEGIN_SRC emacs-lisp
      (use-package persistent-scratch
	:ensure t
	:init
	(persistent-scratch-setup-default)
	(persistent-scratch-autosave-mode 1))
    #+END_SRC
**** treemacs
to be installed and configured, the following is the configuration that is advised in treemacs git repository
     #+BEGIN_SRC emacs-lisp
       ;; (use-package treemacs
       ;;   :ensure t
       ;;   :defer t
       ;;   :init
       ;;   (with-eval-after-load 'winum
       ;;     (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
       ;;   :config
       ;;   (progn
       ;;     (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
       ;; 	  treemacs-deferred-git-apply-delay      0.5
       ;; 	  treemacs-directory-name-transformer    #'identity
       ;; 	  treemacs-display-in-side-window        t
       ;; 	  treemacs-eldoc-display                 t
       ;; 	  treemacs-file-event-delay              5000
       ;; 	  treemacs-file-extension-regex          treemacs-last-period-regex-value
       ;; 	  treemacs-file-follow-delay             0.2
       ;; 	  treemacs-file-name-transformer         #'identity
       ;; 	  treemacs-follow-after-init             t
       ;; 	  treemacs-expand-after-init             t
       ;; 	  treemacs-git-command-pipe              ""
       ;; 	  treemacs-goto-tag-strategy             'refetch-index
       ;; 	  treemacs-indentation                   2
       ;; 	  treemacs-indentation-string            " "
       ;; 	  treemacs-is-never-other-window         nil
       ;; 	  treemacs-max-git-entries               5000
       ;; 	  treemacs-missing-project-action        'ask
       ;; 	  treemacs-move-forward-on-expand        nil
       ;; 	  treemacs-no-png-images                 nil
       ;; 	  treemacs-no-delete-other-windows       t
       ;; 	  treemacs-project-follow-cleanup        nil
       ;; 	  treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
       ;; 	  treemacs-position                      'left
       ;; 	  treemacs-read-string-input             'from-child-frame
       ;; 	  treemacs-recenter-distance             0.1
       ;; 	  treemacs-recenter-after-file-follow    nil
       ;; 	  treemacs-recenter-after-tag-follow     nil
       ;; 	  treemacs-recenter-after-project-jump   'always
       ;; 	  treemacs-recenter-after-project-expand 'on-distance
       ;; 	  treemacs-litter-directories            '("/node_modules" "/.venv" "/.cask")
       ;; 	  treemacs-show-cursor                   nil
       ;; 	  treemacs-show-hidden-files             t
       ;; 	  treemacs-silent-filewatch              nil
       ;; 	  treemacs-silent-refresh                nil
       ;; 	  treemacs-sorting                       'alphabetic-asc
       ;; 	  treemacs-space-between-root-nodes      t
       ;; 	  treemacs-tag-follow-cleanup            t
       ;; 	  treemacs-tag-follow-delay              1.5
       ;; 	  treemacs-user-mode-line-format         nil
       ;; 	  treemacs-user-header-line-format       nil
       ;; 	  treemacs-width                         35
       ;; 	  treemacs-workspace-switch-cleanup      nil)

       ;;     ;; The default width and height of the icons is 22 pixels. If you are
       ;;     ;; using a Hi-DPI display, uncomment this to double the icon size.
       ;;     ;;(treemacs-resize-icons 44)

       ;;     (treemacs-follow-mode t)
       ;;     (treemacs-filewatch-mode t)
       ;;     (treemacs-fringe-indicator-mode 'always)
       ;;     (pcase (cons (not (null (executable-find "git")))
       ;; 		 (not (null treemacs-python-executable)))
       ;;       (`(t . t)
       ;;        (treemacs-git-mode 'deferred))
       ;;       (`(t . _)
       ;;        (treemacs-git-mode 'simple))))
       ;;   :bind
       ;;   (:map global-map
       ;; 	("M-0"       . treemacs-select-window)
       ;; 	("C-x t 1"   . treemacs-delete-other-windows)
       ;; 	("C-x t t"   . treemacs)
       ;; 	("C-x t B"   . treemacs-bookmark)
       ;; 	("C-x t C-t" . treemacs-find-file)
       ;; 	("C-x t M-t" . treemacs-find-tag)))

       ;; (use-package treemacs-projectile
       ;;   :after (treemacs projectile)
       ;;   :ensure t)

       ;; (use-package treemacs-icons-dired
       ;;   :after (treemacs dired)
       ;;   :ensure t
       ;;   :config (treemacs-icons-dired-mode))

       ;; (use-package treemacs-magit
       ;;   :after (treemacs magit)
       ;;   :ensure t)

       ;; (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
       ;;   :after (treemacs persp-mode) ;;or perspective vs. persp-mode
       ;;   :ensure t
       ;;   :config (treemacs-set-scope-type 'Perspectives))
     #+END_SRC
*** Programming helpers

**** Rainbow delimiters
helps identifying matching parentesis easily. In LISP it is really important
  #+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  #+END_SRC
**** electric-pair-mode
does the same as Autopais, but is already included in emacs
  #+BEGIN_SRC emacs-lisp
    (electric-pair-mode t)
  #+END_SRC
**** company-mode
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0
	  company-minimum-prefix-length 2
	  company-selection-wrap-around t)
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
	   ("<tab>" . company-complete-selection))
	  (:map lsp-mode-map
	   ("<tab>" . company-indent-or-complete-common)))
#+end_src
**** hl-todo
#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure t
    :init
    (global-hl-todo-mode t))
  (setq hl-todo-keyword-faces
	'(("TODO"   . "#ffa500")
	  ("FIXME"  . "#ffa500")))
#+end_src
**** multiple-cursors
     #+BEGIN_SRC emacs-lisp
       (use-package multiple-cursors
	 :ensure t
	 :bind (("C-S-c C-S-c" . 'mc/edit-lines)
		("C->" . 'mc/mark-next-like-this)
		("C-<" . 'mc/mark-previous-like-this)
		("C-c C-<" . 'mc/mark-all-like-this)))
     #+END_SRC
**** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config (projectile-mode)
    :custom ((projectile-completion-system 'helm))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/git")
      (setq projectile-project-search-path '("~/git")))
    (setq projectile-switch-project-action #'projectile-dired))
       #+END_SRC
*** org mode configuration
   #+BEGIN_SRC emacs-lisp
   (use-package org
     :init
     (setq org-startup-folded 'content
	   org-log-done t
	   org-directory "~/git/orgfiles")
     :bind(("\C-cl" . 'org-store-link)
	   ("\C-ca" . 'org-agenda)))
   #+END_SRC
**** org-superstar
mainly eye candy but at least I don't need to see so many * and so org mode is more condensed
   #+BEGIN_SRC emacs-lisp
   (use-package org-superstar
      :ensure t
      :hook (org-mode . (lambda () (org-superstar-mode 1))))
   #+END_SRC
*** random packages
**** add search engines to search
search several places from emacs
   #+BEGIN_SRC emacs-lisp
   (use-package engine-mode
      :ensure t
      :config
      (engine-mode t))
    ;; to change the default browser from firefox to eww uncomment the following line
    ;;(setq engine/browser-function 'eww-browse-url)
    ;; the search engines are defined in file:
    (load (expand-file-name "~/.emacs.d/search_engines.el"))
   #+END_SRC
**** writeroom mode
a mode to hide all distraction from emacs and keep focused in the current document and work
   #+BEGIN_SRC emacs-lisp
     (use-package writeroom-mode
       :ensure t
       :bind(([f5] . 'writeroom-mode)))
   #+END_SRC
**** command log
Package useful for making emacs demonstrations
     #+BEGIN_SRC emacs-lisp
       (use-package command-log-mode
	 :ensure t)
     #+END_SRC

** Functions
*** mygrep
    #+BEGIN_SRC emacs-lisp
    (defun mygrep ()
      "Recursively grep from current file directory, ignoring comments."
      (interactive)
      (let* ((search-term (read-string "search term: "))
             (search-path
	       (directory-file-name (expand-file-name (read-directory-name "directory: "))))
             (default-directory (file-name-as-directory search-path))
             (grep-command
	       (concat
	         grep-program
	         " -inIr --include=*.{lisp,cl,bil,el,js,ts,css,xsl,html,dic} -e \"^[^;]*"
	         search-term
		 "\" "
		 search-path)))
            (compilation-start grep-command 'grep-mode (lambda (mode) "grep") nil)))
   #+END_SRC

* Unused Configurations
Some packages I have used in the past, but for some reason I stoped using them, but the configuration might still be useful for someone, so I keep it here until I feel like cleaning this part.
** powerline
 #+BEGIN_SRC emacs-lisp
   ;; (use-package powerline
   ;; :ensure t
   ;; :init
   ;; (powerline-default-theme))
 #+END_SRC
** Auto-complete
automatically completes words in programming modes
   #+BEGIN_SRC emacs-lisp
     ;; (use-package auto-complete
     ;; :ensure t
     ;; :config
     ;; (global-auto-complete-mode t)
     ;; :hook (prog-mode #'auto-complete-mode))
  #+END_SRC

** centaur tabs
 #+BEGIN_SRC emacs-lisp
   ;; (use-package centaur-tabs
   ;; :ensure t
   ;; :bind (("C-<prior>" . 'centaur-tabs-backward)
   ;; ("C-<next>"  . 'centaur-tabs-forward)))
   ;; (centaur-tabs-mode t)
   ;; (centaur-tabs-headline-match)
   ;; (setq centaur-tabs-style "slant")
   ;; (setq centaur-tabs-set-icons t)
   ;; (setq centaur-tabs-cycle-scope 'tabs)
   ;; (setq centaur-tabs-set-modified-marker t)
   ;; (setq centaur-tabs-modified-marker "*")

 #+END_SRC
